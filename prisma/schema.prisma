// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums globales
enum UserRole {
  SUPER_ADMIN
  BUILDING_ADMIN
  OWNER
  SERVICE_PROVIDER
}

enum BuildingStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ServiceProviderStatus {
  UNVERIFIED
  VERIFIED
  FEATURED
  SUSPENDED
}

enum PlanType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum WhatsappStatus {
  CONNECTED
  DISCONNECTED
  PENDING
  FAILED
  CONNECTING
}

enum N8nFlowStatus {
  PENDING
  COMPLETED
  FAILED
}

// Modelos en schema public
model User {
  id              String           @id @default(uuid())
  email           String?          @unique  // Opcional para owners
  password        String?          // Opcional para owners
  firstName       String
  lastName        String
  dni             String?          @unique  // DNI para identificación única
  role            UserRole
  primaryAuthMethod String         @default("EMAIL") // "EMAIL" o "WHATSAPP"
  
  // Campos para autenticación por WhatsApp
  whatsappNumber  String?          @unique
  pin             String?          // PIN hasheado para owners
  recoveryEmail   String?          // Email de recuperación opcional
  securityQuestions Json?          // Preguntas de seguridad
  lastLoginAt     DateTime?
  lastVerifiedAt  DateTime?
  
  // Información adicional del usuario
  unitNumber      String?
  phoneNumber     String?
  profilePicture  String?
  isProfileComplete Boolean        @default(false)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  registeredProviders ServiceProvider[] @relation("UserToServiceProvider")
  managedBuildings Building[]      // Un usuario puede administrar múltiples edificios
  buildings       BuildingOwner[]  // Relación para owners en múltiples edificios
  emailVerifications EmailVerification[] // Verificaciones de email del usuario

  @@map("users")
}

model EmailVerification {
  id               String   @id @default(uuid())
  email            String   @unique
  userId           String?
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationCode String
  expiresAt        DateTime
  isVerified       Boolean  @default(false)
  tempData         Json?  // Datos temporales de registro
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("email_verifications")
}


model Building {
  id               String         @id @default(uuid())
  name             String
  address          String
  city             String?
  state            String?
  country          String?
  postalCode       String?
  email            String?         @unique
  phone            String?
  logo             String?
  isActive         Boolean        @default(true)
  schema           String         @unique // Nombre del schema para este edificio
  status           BuildingStatus @default(ACTIVE)
  isProfileComplete Boolean       @default(false)
  whatsappInstance BuildingWhatsapp?
  
  // Información adicional del edificio
  floors           Int?
  totalUnits       Int?
  constructionYear Int?
  phoneNumber      String?
  whatsapp         String?
  website          String?
  description      String?
  amenities        String[]       @default([]) // Ej: ["Piscina", "Gimnasio", "Seguridad 24hs"]
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  adminId          String
  admin            User           @relation(fields: [adminId], references: [id])
  serviceProviders ServiceProvider[] @relation("BuildingToServiceProvider")
  serviceHistory   ServiceHistory[] @relation("BuildingToServiceHistory")
  plan             Plan           @relation(fields: [planId], references: [id])
  planId           String
  trialEndsAt      DateTime?      // Null si no está en trial o ya terminó
  owners           BuildingOwner[]
  ownerVerifications ownerVerification[]

  @@map("buildings")
}

model Plan {
  id          String    @id @default(uuid())
  type        PlanType  @unique
  name        String
  description String
  maxUnits    Int
  price       Float
  features    String[]
  trialDays   Int       @default(0)
  buildings   Building[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("plans")
}

model ServiceType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  providers   ProviderServiceType[]
  history     ServiceHistory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("service_types")
}

model ServiceProvider {
  id               String               @id @default(uuid())
  businessName     String
  taxId            String?              @unique
  description      String?
  contactName      String?
  email            String?
  phone            String?
  whatsapp         String?
  website          String?
  address          String?
  city             String?
  state            String?
  postalCode       String?
  status           ServiceProviderStatus @default(UNVERIFIED)
  registrationType String
  registeredById   String
  registeredByType String
  verifiedById     String?
  verifiedAt       DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  registeredBy      User                @relation("UserToServiceProvider", fields: [registeredById], references: [id])
  buildings        Building[]           @relation("BuildingToServiceProvider")
  serviceTypes     ProviderServiceType[]
  history          ServiceHistory[]

  @@map("service_providers")
}

model ProviderServiceType {
  provider        ServiceProvider @relation(fields: [providerId], references: [id])
  providerId      String
  serviceType     ServiceType    @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId   String
  createdAt       DateTime       @default(now())

  @@id([providerId, serviceTypeId])
  @@map("provider_service_types")
}

model ServiceHistory {
  id            String          @id @default(uuid())
  provider      ServiceProvider @relation(fields: [providerId], references: [id])
  providerId    String
  building      Building        @relation("BuildingToServiceHistory", fields: [buildingId], references: [id])
  buildingId    String
  serviceType   ServiceType     @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId String
  rating        Int?
  review        String?
  workDate      DateTime
  costRange     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("service_history")
}

// Los siguientes modelos se crearán en cada schema de edificio
model Unit {
  id        String   @id @default(uuid())
  number    String
  floor     String
  ownerId   String   // ID del usuario en la tabla users del schema public
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claims    Claim[]

  @@map("units")
}

model N8nWebhook {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  prodUrl     String
  testUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("n8n_webhooks")
}

model Claim {
  id               String    @id @default(uuid())
  title            String
  description      String
  status           String    // Enum específico del edificio si es necesario
  unit             Unit      @relation(fields: [unitId], references: [id])
  unitId           String
  creatorId        String    // ID del usuario en la tabla users del schema public
  serviceProviderId String?  // ID del proveedor en la tabla service_providers del schema public
  comments         String[]
  images           String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("claims")
}

// Nota: Las tablas Unit y Claim se crearán automáticamente en cada schema de edificio
// mediante migraciones dinámicas cuando se cree un nuevo edificio

// Tabla para la relación entre propietarios y edificios
model BuildingOwner {
  id         String   @id @default(uuid())
  userId     String
  buildingId String
  unitNumber String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  building   Building @relation(fields: [buildingId], references: [id])

  @@unique([buildingId, unitNumber])
  @@map("building_owners")
}

// Nueva tabla para verificaciones de WhatsApp
model ownerVerification {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  whatsappNumber String
  unitNumber     String
  tempToken      String   @unique
  verifyCode     String
  buildingId     String
  building       Building @relation(fields: [buildingId], references: [id])
  expiresAt      DateTime
  isUsed         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("owner_verifications")
}

model BuildingWhatsapp {
  id                  String         @id @default(uuid())
  building            Building       @relation(fields: [buildingId], references: [id])
  buildingId          String         @unique
  instanceId          String?        @unique  // Nullable hasta que n8n confirme la creación
  instanceName        String         // "<buildingName> - <buildingId>"
  status              WhatsappStatus @default(DISCONNECTED)
  n8nFlowStatus       N8nFlowStatus  @default(PENDING)
  evolutionApiStatus  String?        // Estado raw de Evolution API
  qrCode             String?        // Para el proceso de conexión
  lastConnectionAttempt DateTime?    // Última vez que se intentó conectar
  connectionAttempts   Int           @default(0)  // Número de intentos de conexión
  lastError           String?        // Último error si hubo
  qrExpiresAt         DateTime?      // Cuando expira el QR
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@map("building_whatsapp")
}
